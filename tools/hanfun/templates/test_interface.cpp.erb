// =============================================================================
/*!
 * @file       tests/<%= @namespace.path %>/test_<%= @interface.path %>.cpp
 *
 * This is file contains the unit tests for the <%= @interface.to_doc %> <%= @type %>
 * implementation.
 *
 * @version    x.x.x
 *
 * @copyright  Copyright &copy; &nbsp; <%= Date.today.year %> ULE Alliance
 *
 * For licensing information, please see the file 'LICENSE' in the root folder.
 */
// =============================================================================

#include "hanfun/<%= @namespace.path %>/<%= @interface.path %>.h"

#include "test_helper.h"

using namespace HF;
using namespace HF::<%= @namespace.name %>;

using namespace HF::Testing;

using namespace HF::<%= @namespace.name %>::<%= @interface.to_class %>;

// =============================================================================
// <%= @interface.to_doc %>
// =============================================================================

<%- class_name = "#{@interface.to_class}Base" -%>
<%- object = "interface." -%>
<%- object = "service->" if service? -%>
//! Test Group for <%= @interface.to_class %> <%= @type %> parent class.
TEST_GROUP(<%= @interface.to_class %>)
{
   struct <%= class_name %>: public InterfaceParentHelper<<%= @interface.to_class %>::Base>
   {
      <%- if service? -%>
      <%= class_name %>(HF::Core::Unit0 &unit): InterfaceParentHelper<<%= @interface.to_class %>::Base>(unit) {}
      <%- end -%>
   };

   <%- if service? -%>
   Testing::Device *device;
   <%= class_name %> *service;
   <%- else -%>
   <%= class_name %> interface;
   <%- end -%>

   TEST_SETUP()
   {
      <%- if service? -%>
      device  = new Testing::Device();
      service = new <%= class_name %>(*(device->unit0()));
      <%- else -%>
      interface = <%= class_name %>();
      <%- end -%>

      mock().ignoreOtherCalls();
   }

   TEST_TEARDOWN()
   {
      <%- if service? -%>
      delete service;
      delete device;

      <%- end -%>
      mock().clear();
   }
};

//! @test <%= @interface.to_class %>::uid should return @c HF::Interface::<%= @interface.to_uid %>.
TEST(<%= @interface.to_class %>, UID)
{
   LONGS_EQUAL(HF::Interface::<%= @interface.to_uid %>, <%= object -%>uid());
}
<%- unless @attributes.empty? -%>

<%- @attributes.each do |attr| -%>
//! @test <%= attr.to_doc %> support.
TEST(<%= @interface.to_class %>, <%= attr.to_class %>)
{
  HF::Attributes::IAttribute * attr = <%= @interface.to_class %>::create_attribute(<%= @interface.to_class %>::<%= attr.to_uid %>);

  CHECK_TRUE (attr != nullptr);

  LONGS_EQUAL(<%= attr.to_class %>::ID, attr->uid());
  CHECK_EQUAL(<%= attr.to_class %>::WRITABLE, attr->isWritable());
  LONGS_EQUAL(HF::Interface::<%= @interface.to_uid %>, attr->interface());

  delete attr;
}

<%- end -%>
//! @test Check nullptr return for invalid attribute
TEST(<%= @interface.to_class %>, InvalidAttribute)
{
  HF::Attributes::IAttribute * attr = <%= @interface.to_class %>::create_attribute(<%= @interface.to_class %>::__LAST_ATTR__+1);

  CHECK_TRUE (attr == nullptr);
}
<%- end -%>

// =============================================================================
// <%= @interface.to_doc %> Client
// =============================================================================

<%- class_name = "#{@interface.to_class}Client" -%>
<%- object = "client." -%>
<%- object = "client->" if service? -%>
//! Test Group for <%= @interface.to_doc %> Client interface class.
TEST_GROUP(<%= class_name %>)
{
   // TODO Add required unit tests.
   struct <%= class_name %>: public InterfaceHelper<<%= @interface.to_class %>::Client>
   {
      <%- if service? -%>
      <%= class_name %>(HF::Core::Unit0 &unit): InterfaceHelper<<%= @interface.to_class %>::Client>(unit) {}

      <%- end -%>
      <%- @commands.select { |c| c.event }.each do |cmd| -%>
      void <%= cmd.name %>(const Protocol::Address &addr) override
      {
         mock("<%= @interface.to_class %>::Client").actualCall("<%= cmd.name %>");
         InterfaceHelper<<%= @interface.to_class %>::Client>::<%= cmd.name %>(addr);
      }

      <%- end -%>
   };

   <%- if service? -%>
   Testing::Device *device;
   <%= class_name %> *client;
   <%- else -%>
   <%= class_name %> client;
   <%- end -%>

   <%- if @commands.any? { |c| !c.event } -%>
   Protocol::Address addr;
   <%- end -%>

   <%- if @commands.any? { |c| c.event } -%>
   Protocol::Packet  packet;
   Common::ByteArray payload;
   <%- end -%>

   TEST_SETUP()
   {
      <%- if service? -%>
      device = new Testing::Device();
      client = new <%= class_name %>(*(device->unit0()));
      <%- else -%>
      client = <%= class_name %>();
      <%- end -%>

      <%- if @commands.any? { |c| !c.event } -%>
        <%- if service? -%>
          addr = Protocol::Address(42, 0);
        <%- else -%>
          addr = Protocol::Address(42);
        <%- end -%>

      <%- end -%>
      <%- if @commands.any? { |c| c.event } -%>
      packet = Protocol::Packet();
      packet.message.itf.role   = HF::Interface::CLIENT_ROLE;
      packet.message.itf.id     = <%= object %>uid();
      packet.message.itf.member = 0xFF;

      <%- end -%>
      mock().ignoreOtherCalls();
   }

   TEST_TEARDOWN()
   {
      <%- if service? -%>
      delete client;
      delete device;

      <%- end -%>
      mock().clear();
   }
};
<%- unless @commands.empty? -%>
<%- @commands.each do |cmd| -%>

//! @test <%= cmd.to_doc %> support.
TEST(<%= class_name %>, <%= cmd.to_class %>)
{
  // FIXME Generated Stub.
  <%- unless cmd.event -%>
  mock("Interface").expectOneCall("send");

  <%= object %><%= cmd.name %>(addr);

  mock("Interface").checkExpectations();

  LONGS_EQUAL(HF::Interface::CLIENT_ROLE, <%= object %>sendMsg.itf.role);
  LONGS_EQUAL(<%= object %>uid(), <%= object %>sendMsg.itf.id);
  LONGS_EQUAL(<%= @interface.to_class %>::<%= cmd.to_uid %>, <%= object %>sendMsg.itf.member);
  LONGS_EQUAL(Protocol::Message::COMMAND_REQ, <%= object %>sendMsg.type);
  <%- else -%>
  mock("<%= @interface.to_class %>::Client").expectOneCall("<%= cmd.name %>");

  packet.message.itf.member = <%= @interface.to_class %>::<%= cmd.to_uid %>;

  CHECK_EQUAL(Common::Result::OK,<%= object %>handle(packet, payload, 3));

  mock("<%= @interface.to_class %>::Client").checkExpectations();
  <%- end -%>
}
<%- end -%>
<%- end -%>

// =============================================================================
// <%= @interface.to_doc %> Server
// =============================================================================

<%- class_name = "#{@interface.to_class}Server" -%>
<%- object = "server." -%>
<%- object = "server->" if service? -%>
//! Test Group for <%= @interface.to_doc %> Server interface class.
TEST_GROUP(<%= class_name %>)
{
   // TODO Add required unit tests.
   struct <%= class_name %>: public InterfaceHelper<<%= @interface.to_class %>::Server>
   {
      <%- if service? -%>
      <%= class_name %>(HF::Core::Unit0 &unit): InterfaceHelper<<%= @interface.to_class %>::Server>(unit) {}

      <%- end -%>
      <%- @commands.select { |c| !c.event }.each do |cmd| -%>
      void <%= cmd.name %>(const Protocol::Address &addr) override
      {
         mock("<%= @interface.to_class %>::Server").actualCall("<%= cmd.name %>");
         InterfaceHelper<<%= @interface.to_class %>::Server>::<%= cmd.name %>(addr);
      }

      <%- end -%>
   };

   <%- if service? -%>
   Testing::Device *device;
   <%= class_name %> *server;
   <%- else -%>
   <%= class_name %> server;
   <%- end -%>

   <%- if @commands.any? { |c| c.event } -%>
   Protocol::Address addr;
   <%- end -%>

   <%- if @commands.any? { |c| !c.event } -%>
   Protocol::Packet  packet;
   Common::ByteArray payload;
   <%- end -%>

   TEST_SETUP()
   {
      <%- if service? -%>
      device  = new Testing::Device();
      server = new <%= class_name %>(*(device->unit0()));
      <%- else -%>
      server = <%= class_name %>();
      <%- end -%>

      <%- if @commands.any? { |c| c.event } -%>
        <%- if service -%>
          addr = Protocol::Address(42, 0);
        <%- else -%>
          addr = Protocol::Address(42);
        <%- end -%>

      <%- end -%>
      <%- if @commands.any? { |c| !c.event } -%>
      packet = Protocol::Packet();
      packet.message.itf.role   = HF::Interface::SERVER_ROLE;
      packet.message.itf.id     = <%= object %>uid();
      packet.message.itf.member = 0xFF;

      <%- end -%>
      mock().ignoreOtherCalls();
   }

   TEST_TEARDOWN()
   {
      <%- if service? -%>
      delete server;
      delete device;

      <%- end -%>
      mock().clear();
   }
};
<%- unless @attributes.empty? -%>
<%- @attributes.each do |attr| -%>

//! @test <%= attr.to_doc %> support.
TEST(<%= class_name %>, <%= attr.to_class %>)
{
  // FIXME Generated Stub.
<%-
   macro = attr.mandatory ? "" : "_OPT"
   macro = "CHECK#{macro}_ATTRIBUTE"
-%>
  <%= macro %>(<%= @interface.to_class %>Server, <%= attr.to_class %>, <%= attr.writable ? "true" : "false" %>, <%= attr.name %>, 42, <%= attr.type =~ /^u/ ? "142" : "-42" %>);
}
<%- end -%>
<%- end -%>
<%- unless @commands.empty? -%>
<%- @commands.each do |cmd| -%>

//! @test <%= cmd.to_doc %> support.
TEST(<%= class_name %>, <%= cmd.to_class %>)
{
  // FIXME Generated Stub.
  <%- if cmd.event -%>
  mock("Interface").expectOneCall("send");

  <%= object %><%= cmd.name %>(addr);

  mock("Interface").checkExpectations();

  LONGS_EQUAL(HF::Interface::CLIENT_ROLE, <%= object %>sendMsg.itf.role);
  LONGS_EQUAL(<%= object %>uid(), <%= object %>sendMsg.itf.id);
  LONGS_EQUAL(<%= @interface.to_class %>::<%= cmd.to_uid %>, <%= object %>sendMsg.itf.member);
  LONGS_EQUAL(Protocol::Message::COMMAND_REQ, <%= object %>sendMsg.type);
  <%- else -%>
  mock("<%= @interface.to_class %>::Server").expectOneCall("<%= cmd.name %>");

  packet.message.itf.member = <%= @interface.to_class %>::<%= cmd.to_uid %>;

  CHECK_EQUAL(Common::Result::OK,<%= object %>handle(packet, payload, 3));

  mock("<%= @interface.to_class %>::Server").checkExpectations();
  <%- end -%>
}
<%- end -%>
<%- end -%>
