// =============================================================================
/*!
 * @file       src/interfaces/<%= @interface.name %>_server.cpp
 *
 * This file contains the implementation of the <%= @interface.to_doc %> interface : Server role.
 *
 * @version    x.x.x
 *
 * @copyright  Copyright &copy; &nbsp; <%= Date.today.year %> ULE Alliance
 *
 * For licensing information, please see the file 'LICENSE' in the root folder.
 *
 * Initial development by Bithium S.A. [http://www.bithium.com]
 */
// =============================================================================

#include "hanfun/interfaces/<%= @interface.name %>.h"

// =============================================================================
// API
// =============================================================================

using namespace HF;
using namespace HF::Interfaces;
using namespace HF::Interfaces::<%= @interface.to_class %>;

// =============================================================================
// <%= @interface.to_doc %> Interface : Server Role
// =============================================================================

// =============================================================================
// Server::attributes
// =============================================================================
/*!
 *
 */
// =============================================================================
HF::Attributes::UIDS Server::attributes(uint8_t pack_id) const
{
  HF::Attributes::UIDS result;   // FIXME Add mandatory attributes.

   if (pack_id == HF::Attributes::ALL)
   {
     // FIXME Add optional attributes.
   }

   return result;
}

// =============================================================================
// Server::attributes
// =============================================================================
/*!
 *
 */
// =============================================================================
HF::Attributes::IAttribute *Server::attribute(uint8_t uid)
{
   UNUSED(uid);
   return nullptr;  // FIXME Return the attribute for the given uid.
}

#if 0 // FIXME Remove this code or implement if required.
// =============================================================================
// Server::handle_command
// =============================================================================
/*!
 *
 */
// =============================================================================
Common::Result Server::handle_command(Protocol::Packet &packet, Common::ByteArray &payload,
                                      uint16_t offset)
{
   UNUSED(payload);
   UNUSED(offset);

   CMD cmd = static_cast<CMD>(packet.message.itf.member);

   return Common::Result::FAIL_SUPPORT;
}
#endif

// =============================================================================
// Get/Set Attributes
// =============================================================================

