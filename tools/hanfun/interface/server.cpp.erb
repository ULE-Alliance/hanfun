// =============================================================================
/*!
 * @file       src/interfaces/<%= @interface.name %>_server.cpp
 *
 * This file contains the implementation of the <%= @interface.to_doc %> interface : Server role.
 *
 * @version    x.x.x
 *
 * @copyright  Copyright &copy; &nbsp; <%= Date.today.year %> ULE Alliance
 *
 * For licensing information, please see the file 'LICENSE' in the root folder.
 *
 * Initial development by Bithium S.A. [http://www.bithium.com]
 */
// =============================================================================

#include "hanfun/interfaces/<%= @interface.name %>.h"

// =============================================================================
// API
// =============================================================================

using namespace HF;
using namespace HF::Interfaces;
using namespace HF::Interfaces::<%= @interface.to_class %>;

// =============================================================================
// <%= @interface.to_doc %> Interface : Server Role
// =============================================================================

// =============================================================================
// Server::attributes
// =============================================================================
/*!
 *
 */
// =============================================================================
HF::Attributes::UIDS Server::attributes(uint8_t pack_id) const
{
   HF::Attributes::UIDS result({<%= @attributes.select { |attr| attr.mandatory }.map { |attr| attr.to_uid }.join (", ") %>});

   if (pack_id == HF::Attributes::ALL)
   {
     <%- @attributes.select {|attr| !attr.mandatory }.each do |attr| -%>
#ifdef HF_ITF_<%= "#{@interface.short}_#{attr.to_uid}" %>
     result.push_back(<%= attr.to_uid %>);
#endif
     <%- end -%>
   }

   return result;
}

// =============================================================================
// Server::attributes
// =============================================================================
/*!
 *
 */
// =============================================================================
HF::Attributes::IAttribute *Server::attribute(uint8_t uid)
{
   using namespace HF::Interfaces::<%= @interface.to_class %>;

   <%= @interface.to_class %>::Attributes attr = static_cast<<%= @interface.to_class %>::Attributes>(uid);

   switch (attr)
   {
     <%- @attributes.each do |attr| -%>
         <%- unless attr.mandatory -%>
#ifdef HF_ITF_<%= "#{@interface.short}_#{attr.to_uid}" %>
         <%- end -%>
     case <%= attr.to_uid %>:
     {
       typedef HF::Attributes::Attribute<<%= attr.type %>, Server> Attribute;

       auto getter = (<%= attr.type %> (Server::*)(void) const) & Server::<%= attr.name %>;
       auto setter = (void (Server::*)(<%= attr.type %>))       & Server::<%= attr.name %>;

       return new Attribute(*this, attr, getter, setter, <%= attr.to_class %>::WRITABLE);
     }
         <%- unless attr.mandatory -%>
#endif
         <%- end -%>

   <%- end -%>
      default:
         return nullptr;
   }
}

#if 0 // FIXME Remove this code or implement if required.
// =============================================================================
// Server::handle_command
// =============================================================================
/*!
 *
 */
// =============================================================================
Common::Result Server::handle_command(Protocol::Packet &packet, Common::ByteArray &payload,
                                      uint16_t offset)
{
   UNUSED(payload);
   UNUSED(offset);

   CMD cmd = static_cast<CMD>(packet.message.itf.member);

   return Common::Result::FAIL_SUPPORT;
}
#endif

// =============================================================================
// Get/Set Attributes
// =============================================================================

<%- @attributes.each do |attr| -%>
  <%- unless attr.mandatory -%>

#ifdef HF_ITF_<%= "#{@interface.short}_#{attr.to_uid}" %>
  <%- end -%>
// =============================================================================
// Server::<%= attr.name %>
// =============================================================================
/*!
 *
 */
// =============================================================================
<%= attr.type %> Server::<%= attr.name %>() const
{
  return _<%= attr.name %>;
}

// =============================================================================
// Server::<%= attr.name %>
// =============================================================================
/*!
 *
 */
// =============================================================================
void Server::<%= attr.name %>(<%= attr.type %> __value)
{
   HF_SETTER_HELPER(<%= attr.to_class %>, _<%= attr.name %>, __value);
}
<%- unless attr.mandatory -%>
#endif
<%- end -%>

<%- end -%>
